<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[RRRay]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-24T00:20:51.162Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[RRRay]]></name>
    <email><![CDATA[kknightgo@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[akka-on-android]]></title>
    <link href="http://yoursite.com/2015/12/24/akka-on-android/"/>
    <id>http://yoursite.com/2015/12/24/akka-on-android/</id>
    <published>2015-12-24T02:10:33.000Z</published>
    <updated>2015-12-24T00:20:51.162Z</updated>
    <content type="html"><![CDATA[<p>scala环境没问题了，接下来就是加入akka。<br>其实真正麻烦的在akka的库调用上。。特别是proguard rule的debug简直是摸瞎。(ಥ _ ಥ)</p>
<a id="more"></a>
<p>正常来说：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"org.scala-lang:scala-library:2.11.7"</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"com.android.support:multidex:1.0.1"</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.typesafe.akka:akka-actor_2.11:2.3.9'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.typesafe.akka:akka-remote_2.11:2.3.9'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把akka的库依赖加入gradle文件，完事。但事实是问题接二连三</p>
<h2 id="1-_Gradle_duplicate_file_exception"><a href="#1-_Gradle_duplicate_file_exception" class="headerlink" title="1. Gradle duplicate file exception"></a>1. Gradle duplicate file exception</h2><p>当时，具体的错误信息找不到了，不过我的解决方案是在这个<a href="https://code.google.com/p/android/issues/detail?id=61573" target="_blank" rel="external">issue</a>下面找到的,如他描述的，在两个jar中包含相同的文件。但师兄用sbt构建过相同的程序。为什么gradle会出现不得而知。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: duplicate files during packaging of APK .../basic/build/apk/basic-debug-unaligned<span class="class">.apk</span></span><br><span class="line">	Path <span class="keyword">in</span> archive: about<span class="class">.html</span></span><br><span class="line">	Origin <span class="number">1</span>: ...filestore/org<span class="class">.eclipse</span><span class="class">.jetty</span>/jetty-servlet/<span class="number">8.1</span>.<span class="number">8</span>.v20121106/jar/<span class="number">285</span>ea47746e9ab988a8291ea9fd6545b537e0ce9/jetty-servlet-<span class="number">8.1</span>.<span class="number">8</span><span class="class">.v20121106</span><span class="class">.jar</span></span><br><span class="line">	Origin <span class="number">2</span>: ...filestore/org<span class="class">.eclipse</span><span class="class">.jetty</span>/jetty-client/<span class="number">8.1</span>.<span class="number">8</span>.v20121106/jar/f194a5a07ada9dab48e226c4e8152d120ce1e76f/jetty-client-<span class="number">8.1</span>.<span class="number">8</span><span class="class">.v20121106</span><span class="class">.jar</span></span><br></pre></td></tr></table></figure>
<p>我的库依赖为</p>
<pre><code>&apos;com.typesafe.akka:akka-actor_2.11:2.3.9&apos;
&apos;com.typesafe.akka:akka-remote_2.11:2.3.9&apos;
</code></pre><p>类似于上述代买中的错误信息，console提示我这两个jar，包含了本地path:</p>
<pre><code>C:\Users\Ray\.ivy2\cache\com.typesafe.akka\....
</code></pre><p>然后我来到这个位置，扎到上述两个jar，打开后发现确实，其中包含同名文件：reference.conf，可以判断是这个原因gradle显示duplicate file error， 然而我发现这两个文件内容并不相同。我猜想是因为同名的原因，因此我将这两个conf分别加了相应的前缀。然而仍然不可行，至于是什么错误我没有记录。但我觉得确实可能有问题，因为修改文件名应该谨慎，其他地方可能有引用。如此寻找其他的方法。</p>
<p>最终，根据上文中的issue，试出来的办法是：</p>
<ol>
<li><p>merge这两份conf文件，因为其实发现这两个配置文件确实仍然有重复的部分，而且都是类json的键值对数据组织方式，所以把其中一份所有的内容加到另一份中，并保证不重复。</p>
</li>
<li><p>在gradle中去重。<br>因为实际上我采取的策略是只使用一份conf文件，但这份conf包含之前两份的功能，但是我并没有删除任何一份，我把这份merge 过的文件加入到上述两个jar钟，这样，我就成了两份<strong>真正</strong>相同文件的去重问题了。</p>
</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">android</span> &#123;  </span><br><span class="line">    <span class="title">packagingOptions</span> &#123;    </span><br><span class="line">        <span class="title">pickFirst</span> <span class="string">'reference.conf'</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于是就这样解决了这一问题。也是google了好久，当时看到这个<a href="(https://code.google.com/p/android/issues/detail?id=61573">issue</a>)的时候，楼已经盖得老高了，很多描述也不是很详细，居然让我有点联想到国内贴吧风格，差点放弃，不过最后是把整栋楼都读完了，才总结出了这个解决办法。<br>其实这个问题解决了之后，我的akka就这样真的在我的小米上跑起来了，是的，我成功了，我成功使android手机作为slave参与了一个akka框架的并行运算系统，并正确使用一台手机，一台电脑作为slave,一台电脑作为master成功跑完了一个三阶张量的orthogonal问题。</p>
<p>本该一切就这样结束了(ಥ _ ಥ)。</p>
<h2 id="2-_g5_problem"><a href="#2-_g5_problem" class="headerlink" title="2. g5 problem"></a>2. g5 problem</h2><p>然而，并没有什么*用，因为某原因，我仍然需要在使得该程序在g5(api 10,version 2.3.7)，上跑起来。</p>
<p>果然，傲娇的g5没有跑通：</p>
<p>我出现了类似这个<a href="http://stackoverflow.com/questions/23438213/package-has-mismatched-uid-10124-on-disk-10134-in-settings" target="_blank" rel="external">SO</a>上的问题：</p>
<pre><code>Package has mismatched uid: 10124 on disk, 10134 in settings

 E/dalvikvm( 7815): LinearAlloc exceeded capacity (5242880), last=1092
</code></pre><p>这个问题也是goolge了好久才觉得这个解释的比较清楚了。按照这个答案的描述仍然需要用上一篇所述的两种办法</p>
<blockquote><p>Solutions:</p>
<p>Proguard: Proguard removes unreferenced classes/methods from your app. Thus your app’s dex file size decreases. (I’ve solved my problem with proguard)  </p>
<p>Multiple Dex Files: Split your app to multiple dex files. <a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-dalvik-patch-for-facebook-for-android/10151345597798920" target="_blank" rel="external">Facebook</a> has a solution for this. Also read this <a href="http://android-developers.blogspot.se/2011/07/custom-class-loading-in-dalvik.html" target="_blank" rel="external">link</a> for managing multiple dex files.</p>
</blockquote>
<p>所以问题来了，按这个答案的解释，仍然是容量上的问题，如果仍然是DEX 64K Methods Limit,我明明在使用scala库的时候就已经使用了multidex方法，他可以解决scala库的methods limit问题就同样应该可以解决akka的mthethd。重新来看<a href="http://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">Building Apps with Over 65K Methods</a>的multidex方法描述,写到：<br><blockquote><p>Applications that use multidex may not start on devices that run versions of the platform earlier than Android 4.0 (API level 14) due to a Dalvik linearAlloc bug (Issue 22586). If you are targeting API levels earlier than 14, make sure to perform testing with these versions of the platform as your application can have issues at startup or when particular groups of classes are loaded. Code shrinking can reduce or possibly eliminate these potential issues.  </p>
<p>Applications using a multidex configuration that make very large memory allocation requests may crash during run time due to a Dalvik linearAlloc limit (Issue 78035). The allocation limit was increased in Android 4.0 (API level 14), but apps may still run into this limit on Android versions prior to Android 5.0 (API level 21).</p>
</blockquote></p>
<p><strong>So, the real problem is Allocation Limit In old android version!</strong>，android5.0提升了很多，而g5的2.3version很小。因此解释虽然使用multidex可以在小米上跑成功而g5则不可以。</p>
<p>4.0之前是may crush，4.0提升了allocation limit，然而描述仍然是:may still run into this limit.只有5.0做了保证。my poor g5是2.3.7,我哪来的胆子拿着这个去跑分布式？</p>
<p>官方出于官方规范的考虑下了如此结论，民间出高人，再google一下？果然真有这样的文章<a href="http://www.birbit.com/how-to-solve-linearalloc-problem/" target="_blank" rel="external">How to Solve LinearAlloc Problem</a>。</p>
<h3 id="u4E0D_u8FC7_u6211_u8FD8_u662F_u5148_u5C1D_u8BD5_u4E86proguard_u65B9_u6CD5_u3002"><a href="#u4E0D_u8FC7_u6211_u8FD8_u662F_u5148_u5C1D_u8BD5_u4E86proguard_u65B9_u6CD5_u3002" class="headerlink" title="不过我还是先尝试了proguard方法。"></a>不过我还是先尝试了proguard方法。</h3><p>也就是说，虽然我之前使用multidex来解决的scala库的methods limit问题，现在我重新使用proguard来解决所有因为依赖库(包括scala、akka)太大引起的问题。<strong>这里的问题包括methods limit和allocation limit</strong></p>
<p>这个方法也是这个答主说明的他采取的并最终解决了问题的方法，我之所以觉得他更有可能解决这个问题是因为<br>我觉得proguard方法的原理是最直接解决g5上跑较大规模依赖库app的问题，因为它十分具体的减少了构建过程的class的量，这样有效的避免了DEX 64K Methods Limit,同时也使得LinearAlloc Problem不需要考虑，事实上，在使用Multidex解决DEX 64K Methods Limit的时候，官方文档甚至提出在某些低端机上要使用proguard做配合。</p>
<p>总体的思路是：</p>
<ol>
<li>在gradle中说明启用proguard及其相关rule。</li>
<li>在网上查找akka库是否已经有现成的proguard rule文件，有则使用。</li>
<li>别人的rule并不一定完全适用，build的时候会出现class not found的问题</li>
<li>根据错误提示，增加keep 规则</li>
<li>重复3,4直至build和run的时候都没有classNotFound的问题</li>
</ol>
<p>这个东西当我第一次看到他的<a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html" target="_blank" rel="external">文档</a>的时候，就方了，这种朴素的markdown风格加上瀑布一般的排版。。。看不下去。。。总之原理基本上是，根据控制台输出的错误信息，一般是，方法或者类丢失，说明proguard丢弃了这个方法或类，那么在rule文件里把有完全限定名的类使用keep语句手动保留，就可以了。比较典型的有下面两种：  </p>
<pre><code>如果Build过程提示classNotFound或者methodNotFound就直接keep 
</code></pre><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keep class akka.actor.LocalActorRefProvider<span class="variable">$Guardian</span>&#123;</span><br><span class="line">  *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果告诉你类似<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Unable to <span class="operator"><span class="keyword">start</span> activity ComponentInfo&#123;com.myapp/com.myapp.MyActivity&#125;: <span class="keyword">java</span>.lang.NoSuchMethodException: &lt;init&gt; [<span class="keyword">interface</span> com.typesafe.config.Config, <span class="keyword">interface</span> akka.<span class="keyword">event</span>.LoggingAdapter, <span class="keyword">interface</span> <span class="keyword">java</span>.util.<span class="keyword">concurrent</span>.ThreadFactory]</span></span><br></pre></td></tr></table></figure></p>
<p>则用：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">keepclasseswithmembers <span class="class"><span class="keyword">class</span> * &#123;</span></span><br><span class="line"></span>    public &lt;init&gt;(com.typesafe.config.Config, akka.event.LoggingAdapter, java.util.concurrent.ThreadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p>
<p>这两招屡试不爽。。虽然proguard还有许多其他keep方式。。。但实在不想去看瀑布了。。</p>
<p>在这个过程中数度想要放弃<br><strong>BUT</strong>确实到最后没有classNotFound的问题了，build也成功了，然而新问题是：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">11</span>:<span class="number">27</span>:<span class="number">42.149</span>] [WorkerSystem-akka.remote.default-remote-dispatcher-<span class="number">6</span>] [akka.tcp:<span class="regexp">//</span>WorkerSystem<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">108</span>:<span class="number">2555</span>/<span class="keyword">system</span>/endpointManager/reliableEndpointWriter-akka.tcp<span class="variable">%3A</span><span class="variable">%2F</span><span class="variable">%2FParallelHOSVD</span><span class="variable">%40192</span>.<span class="number">168.1</span>.<span class="number">102</span><span class="variable">%3A2552</span>-<span class="number">0</span>] Association with remote <span class="keyword">system</span> [akka.tcp:<span class="regexp">//</span>ParallelHOSVD<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">102</span>:<span class="number">2552</span>] has failed, address is now gated <span class="keyword">for</span> [<span class="number">5000</span>] ms. Reason is: [exception during creation].</span><br></pre></td></tr></table></figure>
<p>然后我用小米同样试着跑了一下，发现一样的问题，所以是我前面的build过程仍然有问题。然而现在已知的错误信息只有这个，并且似乎只是简单地在阐述连接失败，并没有为何失败的信息。从这个节点已经查不下去了。</p>
<p>这里我可以下结论说使用proguard来帮助g5构建akka失败。</p>
<h3 id="proguard_conclusion"><a href="#proguard_conclusion" class="headerlink" title="proguard conclusion"></a>proguard conclusion</h3><p>该保留哪些方法哪些class靠人工写一份没有漏洞的rule太难，关于第三方库proguard rule看到过这样的阐述:</p>
<blockquote><p>Many problems with ProGuard stem from the inclusion of third-party libraries in your project.<br>the first step in avoiding such errors is to consult the documentation of each third-party library and follow any instructions for deployment with ProGuard.<br>If the documentation mentions nothing about ProGuard, but the library is open source, then there is no point to obfuscating its code from a security standpoint anyway.</p>
<footer><strong>A Conservative Guide to ProGuard for Android</strong><cite><a href="http://omgitsmgp.com/2013/09/09/a-conservative-guide-to-proguard-for-android/" target="_blank" rel="external">omgitsmgp.com/2013/09/09/a-conservative-guide-to-proguard-for-android</a></cite></footer></blockquote>
<h2 id="Still_using_multidex"><a href="#Still_using_multidex" class="headerlink" title="Still using multidex"></a>Still using multidex</h2><p>如果使用Multidex方法，则要解决<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Package has mismatched uid: <span class="number">10124</span> <span class="function_start"><span class="keyword">on</span></span> disk, <span class="number">10134</span> <span class="keyword">in</span> settings   </span><br><span class="line">E/dalvikvm( <span class="number">7815</span>): LinearAlloc exceeded capacity (<span class="number">5242880</span>), <span class="keyword">last</span>=<span class="number">1092</span></span><br></pre></td></tr></table></figure></p>
<p>根据之前的总结其实是Android早期版本的Dalvik linearAlloc bug，但此时的我感觉要恢复一下原气…才有勇气继续尝试<a href="http://www.birbit.com/how-to-solve-linearalloc-problem/" target="_blank" rel="external">How to Solve LinearAlloc Problem</a></p>
<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>所以其实这整个过程，如果不看g5，已经做到了使用scala写android程序，以及在Android5.0设备上使用akka，使移动设备成为一个并行系统的slave进行工作。</p>
<p>至于g5的结论就是，即使是build过程解决了method limit问题，然而run的过程中仍有<strong>Dalvik linearAlloc bug</strong>. <code>scala&amp;akka-actor&amp;akka-remote</code>这种规模的依赖库在android4.0之前跑的可能性不太大，android5.0则完整解决了DEX 64K Methods Limit以及LinearAlloc Problem，可以使用这种规模的依赖库。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>scala环境没问题了，接下来就是加入akka。<br>其实真正麻烦的在akka的库调用上。。特别是proguard rule的debug简直是摸瞎。(ಥ _ ಥ)</p>]]>
    
    </summary>
    
      <category term="akka" scheme="http://yoursite.com/tags/akka/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="build" scheme="http://yoursite.com/tags/build/"/>
    
      <category term="parallel" scheme="http://yoursite.com/tags/parallel/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala on android]]></title>
    <link href="http://yoursite.com/2015/12/23/scala-on-android/"/>
    <id>http://yoursite.com/2015/12/23/scala-on-android/</id>
    <published>2015-12-23T07:11:30.000Z</published>
    <updated>2015-12-24T00:20:54.160Z</updated>
    <content type="html"><![CDATA[<p>今天大概要宣布第一条路走不通了。</p>
<p>感觉还是有必要把这条路重新理一下。。。毕竟并不是什么效果都没有看到。</p>
<p>任务：在安卓手机上实现akka remote，我也不知道做这件事情到底有什么意义= =</p>
<p>现有条件： </p>
<ol>
<li>一个需要akka跑的scala分布式程序。</li>
<li>丧心病狂的来了，由于某种更加扭曲的实验方式的限制，最终实验必须要在一台g5上跑起来。</li>
</ol>
<p>恩，先压抑住吐槽</p>
<a id="more"></a>
<h1 id="scala_on_android"><a href="#scala_on_android" class="headerlink" title="scala on android"></a>scala on android</h1><p> 经过搜索之后，发现在安卓平台上跑scala并不是什么新鲜事了，scala作为一门基于java虚拟机的语言，同样第一步需要预编译成class文件，然后打包成apk安装到android上，原理上是完全没有问题的。</p>
<p>不过当时遇到的问题是，一般scala使用的build tool 是sbt，而我目前使用的IDE android studio使用的是gradle. 这样记得当时google出来的scala on android的一些插件或者套路基本根据这两种build tool来的。我也不知道该使用哪一种，因为实际上两种我都并没有很了解，似乎走了不少弯路。  </p>
<p>不过最终，让我跑通的是：<a href="https://github.com/saturday06/gradle-android-scala-plugin" target="_blank" rel="external">基于gradle的</a>，毕竟这是android studio自带的build tool, 配置起来可能会方便一点。</p>
<p>这里遇到一个问题是<a href="https://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">DEX 64K Methods Limit</a>.当依赖的库太多的时候(这个scala语言库本身还是比较大)，毕竟这些Jar包都要被一起build成一个dex文件，而默认一个apk只包含一个dex文件。 android的build机制对这样的一个库的容量有所限制.：</p>
<blockquote><p>As the Android platform has continued to grow, so has the size of Android apps. When your application and the libraries it references reach a certain size, you encounter build errors that indicate your app has reached a limit of the Android app build architecture. Earlier versions of the build system report this error as follows:</p>
<pre><code>Conversion to Dalvik format failed:
Unable to execute dex: method ID not in [0, 0xffff]: 65536
</code></pre><p>More recent versions of the Android build system display a different error, which is an indication of the same problem:</p>
<pre><code>trouble writing output:
Too many field references: 131000; max is 65536.
You may try using --multi-dex option.
</code></pre></blockquote>
<p>其实这个问题在解决scala库依赖的时候根本不需要我操心。。因为我只用在作者已经配置好的<a href="https://github.com/saturday06/gradle-android-scala-plugin/tree/master/sample/simple" target="_blank" rel="external">sample</a>上继续写程序就可以了。但是我在akka库依赖的处理上这个问题并没有结束。</p>
<h3 id="1-_use_proguard"><a href="#1-_use_proguard" class="headerlink" title="1. use proguard."></a>1. use proguard.</h3><p>android devloper上有简单地概念介绍：</p>
<blockquote><p>The ProGuard tool shrinks, optimizes, and obfuscates your code by removing unused code and renaming classes, fields, and methods with semantically obscure names. The result is a smaller sized .apk file that is more difficult to reverse engineer.</p>
<footer><strong>ProGuard</strong><cite><a href="http://developer.android.com/tools/help/proguard.html" target="_blank" rel="external">developer.android.com/tools/help/proguard.html</a></cite></footer></blockquote>
<p>这东西有两个作用，一个是减小apk的大小，一个是对方法名进行混淆。我需要用到他的第一个作用，思路就是引用的库中，很多方法其实根本用不到，所以proguard就会帮助build tool把引用到的那一部分加入编译，这样就不会使dex文件过大。那么他是怎么判断哪些方法该被加入编译，哪些是没用的呢，这东西还没有那么智能。。需要一份rules来规定哪些方法和类是需要保存的，虽然sdk tool自带一份默认的rules，但是！一般情况还是需要debug一下，然后手动修改rules文件。如果是第三方的jar包，那就更没得跑了。</p>
<p>其实在使用scala lib的时候并不需要这一步，因为之前提到过，直接使用作者已经配置好的<a href="https://github.com/saturday06/gradle-android-scala-plugin/tree/master/sample/simple" target="_blank" rel="external">sample</a>就可以了，不过这个sample使用的是第二种方法。但是如果想要使用progurad来解决这个问题也可以在网上找到现成的scala库的<a href="https://github.com/pocorall/hello-scaloid-gradle/blob/master/proguard-rules.txt" target="_blank" rel="external">proguard rule</a>,这个方法我也使用过，也可以成功跑通scala.</p>
<p>scala这一块已经解决，然而。。akka似乎并没有提供这样一份东西。。详细的内容在后一篇。</p>
<h3 id="2-_Use_MultiDex"><a href="#2-_Use_MultiDex" class="headerlink" title="2. Use MultiDex"></a>2. Use MultiDex</h3><p>事实上我使用的作者的sample 并没有使用proguard方法，而是使用 multidex。<br>解决思路就是，以前一个apk只有一个dex包，dex又有大小限制，那么我就吧class分成多个dex打包，使用不同dex中的class的时候采取某种调用机制。这样就不会超过这个限制。</p>
<p>官方解释：<br><blockquote><p>Versions of the platform prior to Android 5.0 use the Dalvik runtime for executing app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. </p>
<p>Android 5.0 and higher uses a runtime called ART which natively supports loading multiple dex files from application APK files.</p>
</blockquote></p>
<p>其实主要是在gradle的build文件中添加multidex方法的依赖库，然后修改一些关联的配置<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span> <span class="string">'com.android.support:multidex:1.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p>
<p>详细的内容太仍然在<a href="https://developer.android.com/tools/building/multidex.html#mdex-gradle" target="_blank" rel="external">Configuring Your App for Multidex with Gradle</a>  </p>
<p>题外话：</p>
<p>想起毕设的时候就用到过dex，不过仍然是懵懵懂懂，又是kd移动分布式任务处理。。。通过用sdk tool可以把jar转换成dex, 这样一个dex就是分块任务，从而方便任务的分发与调用。看到Multidex lib的机制就想到了这么一件事。</p>
<h3 id="in_the_end"><a href="#in_the_end" class="headerlink" title="in the end"></a>in the end</h3><p>总结一下，在android上使用scala:</p>
<ol>
<li><p>根据IDE下载scala语言的parse插件，我在android studio中使用的是<a href="http://www.jetbrains.net/confluence/display/SCA/Scala+Plugin+for+IntelliJ+IDEA" target="_blank" rel="external">这款</a>。这样IDE可以识别scala.</p>
</li>
<li><p>使用这款支持scala编译的<a href="https://github.com/saturday06/gradle-android-scala-plugin" target="_blank" rel="external">插件</a>，并根据其read文件来解决可能遇到的<a href="https://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">DEX 64K Methods Limit</a>问题。<br>有两个解决方法：如果使用multidex，参考<a href="https://developer.android.com/tools/building/multidex.html#mdex-gradle" target="_blank" rel="external">Configuring Your App for Multidex with Gradle</a>，步骤并不多。甚至你可以直接使用该<a href="https://github.com/saturday06/gradle-android-scala-plugin/tree/master/sample/simple" target="_blank" rel="external">sample</a>的build配置，在此基础上写程序即可；如果使用proguard，先上网搜索该库的proguard文件，常常会有人已经写出来了，这里<a href="https://github.com/pocorall/hello-scaloid-gradle/blob/master/proguard-rules.txt" target="_blank" rel="external">hello-scaloid-gradle</a>就做了提供。</p>
</li>
<li><p>使用scala来写android app~<br>可以使用一些框架，比如<a href="https://github.com/pocorall/scaloid" target="_blank" rel="external">scaloid</a></p>
</li>
</ol>
<blockquote><p>Scaloid is a library that simplifies your Android code.<br>It makes your code easy to understand and maintain by leveraging Scala language.</p>
</blockquote>
<p><img src="https://camo.githubusercontent.com/72417659473b911df7f1bd03359de67685783ae7/687474703a2f2f6f2d6e322e636f6d2f766572626f736553696d706c652e706e67" alt=""></p>
<p>如上图所示,总体感觉用scala写android还是蛮爽的（不过不敢直接写app），特别是最近写的看的都是python，看scala会顺眼许多。其实即使不使用这种构建方式，仅仅利用scala多范式语言的特性，也可以写出足够清爽的android app。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天大概要宣布第一条路走不通了。</p>
<p>感觉还是有必要把这条路重新理一下。。。毕竟并不是什么效果都没有看到。</p>
<p>任务：在安卓手机上实现akka remote，我也不知道做这件事情到底有什么意义= =</p>
<p>现有条件： </p>
<ol>
<li>一个需要akka跑的scala分布式程序。</li>
<li>丧心病狂的来了，由于某种更加扭曲的实验方式的限制，最终实验必须要在一台g5上跑起来。</li>
</ol>
<p>恩，先压抑住吐槽</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="proguard" scheme="http://yoursite.com/tags/proguard/"/>
    
      <category term="scala" scheme="http://yoursite.com/tags/scala/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cat]]></title>
    <link href="http://yoursite.com/2015/12/23/cat/"/>
    <id>http://yoursite.com/2015/12/23/cat/</id>
    <published>2015-12-23T06:33:28.000Z</published>
    <updated>2015-12-23T06:33:28.503Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[learn pyspider]]></title>
    <link href="http://yoursite.com/2015/12/20/learn-pyspider/"/>
    <id>http://yoursite.com/2015/12/20/learn-pyspider/</id>
    <published>2015-12-20T14:34:32.000Z</published>
    <updated>2015-12-22T05:55:22.499Z</updated>
    <content type="html"><![CDATA[<p>虽然知道当时实验室的活以及随之到来的各种考试已经占满了时间表，但是仅仅因为我自己很想做，还是接下来了。</p>
<h1 id="u5FC3_u8DEF_u5386_u7A0B"><a href="#u5FC3_u8DEF_u5386_u7A0B" class="headerlink" title="心路历程"></a>心路历程</h1><p>大概了解了爬虫的情况之后，觉得还是用框架比较好。<br>当时的需求是：</p>
<ol>
<li>爬的数据量要比较大，当时他们甚至提出多买几台服务器的提议。</li>
<li>需要的信息很多是实时刷新，这也是需要这个审核发布系统的原因，可是随时尽快的得到最新的爬虫数据。</li>
<li>希望可以方便的添加爬虫，也便于这个部分给非技术人员的交接。</li>
</ol>
<a id="more"></a>
<p>然后大概了解了当前的爬虫技术的情况，首先进入视野的当然是scrapy。确实，scrapy非常容易上手，几个组件的工作流程清晰。不过我当时马上遇到了要解析js请求的问题。对于不需要js渲染的网站，当时很快成功了，面对需要渲染的网站：主要办法</p>
<ol>
<li>手动模拟请求方式</li>
<li>配合轻型浏览器作为中间件来渲染网页</li>
</ol>
<p>不过看过了某家网站的请求，发现似乎其request是加密的，每次js request是不一样的，因此觉得第一个办法打了折，并且关于渲染时间和人工分析时间的trade off，目前情况，我还是觉得后者比较昂贵。</p>
<p>至于第二种办法，我找到了这个组件： <a href="http://blog.scrapinghub.com/2015/03/02/handling-javascript-in-scrapy-with-splash/" target="_blank" rel="external">Splash</a>,<a href="http://splash.readthedocs.org/en/stable/" target="_blank" rel="external">文档</a>，其实发现splash的定制化很高，但是文档也很长。没耐心看的时候有点头疼，中间我在调试的时候发现了另外一个爬虫框架：<a href="http://docs.pyspider.org/en/latest/Working-with-Results/" target="_blank" rel="external">pyspider</a>，这是它的描述：</p>
  <blockquote><ul>
<li>Write script in Python  </li>
<li>Powerful WebUI with script editor, task monitor, project manager and result viewer  </li>
<li>MySQL, MongoDB, Redis, SQLite, PostgreSQL with SQLAlchemy as database backend</li>
<li>RabbitMQ, Beanstalk, Redis and Kombu as message queue</li>
<li>Task priority, retry, periodical, recrawl by age, etc…</li>
<li>Distributed architecture, Crawl Javascript pages, Python 2&amp;3, etc…</li>
</ul>
</blockquote>
<p>完全符合需求，更重要的是，文档中也直接给出当时比较头疼的js渲染问题例子，感觉比较适合自己小白的身份。而且文档一点也不长，解释很清楚，所以立马上手试验，对了，关键是有web端控制台，简直就是小白的利器。考虑到当时最主要的解析js的问题，同样目钱的需求是能立刻使功能实现，另外phantomjs也允许做出进一步的渲染需求，所以马上就转手Pyspider了。</p>
<p>以一个小白的身份感受比较深的是这几点好处：</p>
<ol>
<li>组件结构清晰，适应分布式的处理方式，因此也容易根据各个组建的状态分析问题。</li>
<li>控制台友好，方便在其他终端查看服务器上的爬虫状态，更重要的是，在其他终端就可以很方便的进行调试。</li>
<li>组件的配置非常灵活，可以适应不同的爬虫规模。</li>
</ol>
<p>特别是自己感受的前两点，<strong>非常方便找bug和分析问题</strong>，一直觉得调试方便时使用轮子的最重要的一点.<br>另外这个框架是北邮的一位同学写的，在group里是有问必答。感谢轮子主。。。还有比这一点更适合小白的吗<em>(:зゝ∠)</em></p>
<h1 id="u5177_u4F53_u4F7F_u7528"><a href="#u5177_u4F53_u4F7F_u7528" class="headerlink" title="具体使用"></a>具体使用</h1><h2 id="u5B89_u88C5_u8FC7_u7A0B"><a href="#u5B89_u88C5_u8FC7_u7A0B" class="headerlink" title="安装过程"></a>安装过程</h2><p>除了官方文档，参考这位同学的<a href="https://imlonghao.com/9.html" target="_blank" rel="external">博文</a>，这位博主的<a href="https://imlonghao.com/10.html" target="_blank" rel="external">轻松组建分布式 pyspider 集群</a>也是很好的参考。</p>
<h2 id="u4F7F_u7528"><a href="#u4F7F_u7528" class="headerlink" title="使用"></a>使用</h2><p>作者的文档比较清晰，这里有几处花时间较多的点：</p>
<ol>
<li><p>phamtomjs挂掉  </p>
<p>crawl rate这里，作者提到了<a href="http://en.wikipedia.org/wiki/Token_bucket" target="_blank" rel="external">token_bucket</a>，之前有时候会遇到phantomjs挂掉的情况，实验过后发现应该适合crawl rate的设置有关。遇到phamtomjs挂掉的问题，我现在的解决办法是：</p>
</li>
</ol>
<ul>
<li>设置crawl rate变小，默认1/3,我会改成0.5/3，</li>
<li>在不同的端口多开几个phantomjs的process和对应的 fetcher的process</li>
</ul>
<p>其实关于速率这个问题，我还没有仔细的研究过该怎么找到最好的适应不同爬虫规模的那个point，作者也提供了爬虫平均速率在Webui的展示，但是赶着完成其他部分。以后不同规模和环境的爬虫跑起来以后，可能这个问题还是需要搞清楚。</p>
<ol>
<li>重写result处理方法</li>
</ol>
<p>在框架中的result默认处理方式是将所有结构化信息打包成了一个jsonobject存储在了默认以project为名的表中。并且框架不提供关于进一步处理result的接口，这样的话，需要重写result处理这部分的程序。重写on_result方法（刚方法是处理前面爬虫组件传递的result的回调方法）。默认是project, taskid等此类task信息加上一个result jsonobject作为插入数据库的feild，这里，我需要把result json拆分成单独的field插入到指定的表中。重写的<a href="https://github.com/potatoker/pyspider-files" target="_blank" rel="external">my_result_worker</a>这个类将被作为参数指定执行result_worker组件。把这两个文件放到pyspider的根目录下即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>虽然知道当时实验室的活以及随之到来的各种考试已经占满了时间表，但是仅仅因为我自己很想做，还是接下来了。</p>
<h1 id="u5FC3_u8DEF_u5386_u7A0B"><a href="#u5FC3_u8DEF_u5386_u7A0B" class="headerlink" title="心路历程"></a>心路历程</h1><p>大概了解了爬虫的情况之后，觉得还是用框架比较好。<br>当时的需求是：</p>
<ol>
<li>爬的数据量要比较大，当时他们甚至提出多买几台服务器的提议。</li>
<li>需要的信息很多是实时刷新，这也是需要这个审核发布系统的原因，可是随时尽快的得到最新的爬虫数据。</li>
<li>希望可以方便的添加爬虫，也便于这个部分给非技术人员的交接。</li>
</ol>]]>
    
    </summary>
    
      <category term="crawler" scheme="http://yoursite.com/tags/crawler/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="general tech" scheme="http://yoursite.com/categories/general-tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[json使用总结]]></title>
    <link href="http://yoursite.com/2015/12/20/json%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2015/12/20/json使用总结/</id>
    <published>2015-12-20T12:38:30.000Z</published>
    <updated>2015-12-22T05:54:13.666Z</updated>
    <content type="html"><![CDATA[<p>写爬虫的时候真的发现json很好用，作为一种序列化机制。。。恐怕没有更好理解的了。</p>
<p>这里我的数据经历了：</p>
<p><strong>网站–&gt;python爬虫–&gt;mysql数据库&lt;–&gt;php程序&lt;–&gt;java(安卓app)</strong></p>
 <a id="more"></a> 
<p>其中：</p>
<h1 id="1-_python_u5230mysql"><a href="#1-_python_u5230mysql" class="headerlink" title="1. python到mysql"></a>1. python到mysql</h1><p> 在爬虫中，将response中需要的数据整合成dict例如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="string">"url"</span>: response.url,</span><br><span class="line">         <span class="string">"title"</span>: response.doc(<span class="string">'.article_title'</span>).text(),</span><br><span class="line">         <span class="string">"price"</span>: response.doc(<span class="string">'.article_title span'</span>).text(),</span><br><span class="line">         <span class="string">"sale_desc"</span>: response.doc(<span class="string">'[itemprop="description"]:first-child'</span>).text(),</span><br><span class="line">         <span class="string">"product_desc"</span>: response.doc(<span class="string">'.wiki-box+.inner-block p:first-child'</span>).text(),</span><br><span class="line"><span class="string">"imglist"</span>: imglist</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该dict将被以**arg的形式传递给数据库操作函数，从而将dict中的item一一对应插入到数据库的表的field中。这其中注意到imglist是一个列表，其他类型都是text(感觉还没有从python implicit声明的习惯中适应)。在pyspider源码中，数据库操作传入的参数是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">         <span class="string">'taskid'</span>: taskid,</span><br><span class="line">         <span class="string">'url'</span>: url,</span><br><span class="line">         <span class="string">'result'</span>: result,</span><br><span class="line">         <span class="string">'updatetime'</span>: time.time(),</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self._replace(tablename, **self._stringify(obj))</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_stringify</span><span class="params">(self, data)</span>:</span></span><br><span class="line">     <span class="keyword">if</span> <span class="string">'result'</span> <span class="keyword">in</span> data:</span><br><span class="line">         data[<span class="string">'result'</span>] = json.dumps(data[<span class="string">'result'</span>])</span><br><span class="line">     <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<p>如果dict中有除字符串以外的数据类型也需要进行“字符串化”，就是这里的_stringfy()函数,其实就是进行json格式的转换。所以同理，在重写的result_worker中也应该吧imglist这个python中的list转换为json,在放入dict传递给数据库操作函数:</p>
<pre><code>imgjson = json.dumps(imgList)
</code></pre><p>这样return的dict就可以放心交给result_worker，其实json化这一步也可以放在<a href="https://github.com/potatoker/pyspider-files/blob/master/result_worker/my_result_worker.py" target="_blank" rel="external">my_result_worker</a>中，因为在on_result方法中才会把整个dict传给数据库操作类SQL。</p>
<p>所以总结的话，常常会用到把python中的数据映射到数据库中，由于python的dict和**args参数形式十分好用，所以只用把需要的数据库field组织成dict，这个dict的各个值都是字符串，如果有数据不是的话就将其jsondump然后传给数据库操作函数就可以了。把pyspider的源码抄过来：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(self,tablename=None,**values)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> SQL.connection == <span class="string">''</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Please connect first"</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">   tablename = self.escape(tablename )</span><br><span class="line">   <span class="keyword">if</span> values:</span><br><span class="line">       _keys = <span class="string">", "</span>.join(self.escape(k) <span class="keyword">for</span> k <span class="keyword">in</span> values)</span><br><span class="line">       _values = <span class="string">", "</span>.join([self.placeholder, ] * len(values))</span><br><span class="line">       sql_query = <span class="string">"REPLACE INTO %s (%s) VALUES (%s)"</span> % (tablename, _keys, _values)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       sql_query = <span class="string">"REPLACE INTO %s DEFAULT VALUES"</span> % tablename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   cur = SQL.connection.cursor()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">       <span class="keyword">if</span> values:</span><br><span class="line">           cur.execute(sql_query, list(itervalues(values)))</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           cur.execute(sql_query)</span><br><span class="line"></span><br><span class="line">       SQL.connection.commit()</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">   <span class="keyword">except</span> mysql.connector.Error <span class="keyword">as</span> err:</span><br><span class="line">       <span class="keyword">print</span> (<span class="string">"An error occured: &#123;&#125;"</span>.format(err))</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>这种程序数据到数据库数据的映射简直是万金油啊，不要太好用。完整的SQL文件在<a href="https://github.com/potatoker/pyspider-files/blob/master/result_worker/mymysql.py" target="_blank" rel="external">这里</a>。</p>
<p>在数据库中，可以看到在数据库中imglist的形式是[‘aa’,’bb’]，当然是字符串，但是在今后的额decode的时候来看，这是一个jsonArray.完整的映射表如下:</p>
<p>  <img src="http://images.cnblogs.com/cnblogs_com/coser/201112/201112141621136287.png" alt=""></p>
<p>在源码中result作为一个dict被jsondump()之后插入数据库的field，在数据库中显示<code>{&quot;name&quot;:&quot;dd&quot;,&quot;hobby&quot;:&quot;aa&quot;}</code>,是一个jsonobject.</p>
<h1 id="2-_mysql-_26gt_3Bphp"><a href="#2-_mysql-_26gt_3Bphp" class="headerlink" title="2. mysql-&gt;php"></a>2. mysql-&gt;php</h1><pre><code>while($row=mysql_fetch_array($result,MYSQL_ASSOC))
{
      echo urldecode(json_encode($row));
      echo &quot;\n&quot;;
}
</code></pre><p>游标中的一个row被取下来之后，转换成json然后echo出去。</p>
<h1 id="3-_php-_26gt_3Bjava"><a href="#3-_php-_26gt_3Bjava" class="headerlink" title="3. php-&gt;java"></a>3. php-&gt;java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JSONObject json = <span class="keyword">new</span> JSONObject(result);</span><br><span class="line">details = json.getString(<span class="string">"details"</span>);</span><br><span class="line">JSONArray images = json.getJSONArray(<span class="string">"imglist"</span>);</span><br><span class="line"> 	 <span class="comment">//把imglist里的网址(string 类型)传递给了java array</span></span><br><span class="line">String[] banImages = <span class="keyword">new</span> String[images.length()];						</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; images.length(); i++)&#123;</span><br><span class="line">	String image = images.getString(i);</span><br><span class="line">	banImages[i] = image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>php echo的字节流进入socket的inputstream，这个字节流的一行就是sql执行的row，通过readline就可以取出这一行，这一行在php里经过json_encode，所以在java这边作为一个JSONObject，然后进行解析，通过get函数来取出每一个field，这样就最终得到需要的粒化的数据了。</p>
<h1 id="4-_java-_26gt_3Bphp"><a href="#4-_java-_26gt_3Bphp" class="headerlink" title="4. java-&gt;php"></a>4. java-&gt;php</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSONObject checkState = <span class="keyword">new</span> JSONObject();</span><br><span class="line">JSONArray keptIds = <span class="keyword">new</span> JSONArray(Arrays.asList(checkedIdcode));</span><br><span class="line">checkState.put(<span class="string">"keptIds"</span>, keptIds);</span><br></pre></td></tr></table></figure>
<p>这里其实就是把java的object进行转换成jsonobject,这个jsonobject的每一项，可能都需要一定的转换，把一个java对象的各个变量put到这个JSONObject中就可以了。可以put对象，也可以如上例put jsonArray,最后需要：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">checkState.toString()<span class="comment">//这里checkstate作为一个JSONObject，将被通过outputstream传递给server上的php，</span></span><br><span class="line"></span><br><span class="line">String content = URLEncoder.encode(<span class="string">"checkstate"</span>, <span class="string">"UTF-8"</span>) + <span class="string">"="</span></span><br><span class="line">							+ URLEncoder.encode(checkState,<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">out.writeBytes(content);</span><br></pre></td></tr></table></figure></p>
<p>比较详细的java和php以及java和java之间用json来序列化传输的例子在<a href="http://www.matjazcerkvenik.si/developer/java-json.php" target="_blank" rel="external">这里</a>。<br>整个传输的例子还有诸如<a href="http://stackoverflow.com/questions/19627524/post-data-in-json-format-to-php-script-with-java" target="_blank" rel="external">这里</a></p>
<h1 id="5_php-_26gt_3Bmysql"><a href="#5_php-_26gt_3Bmysql" class="headerlink" title="5 php-&gt;mysql"></a>5 php-&gt;mysql</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$checkstate</span> = <span class="variable">$_POST</span>[<span class="string">'checkstate'</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$checkobj</span> =  json_decode(<span class="variable">$checkstate</span>，<span class="keyword">true</span>);</span><br><span class="line"><span class="variable">$okArray</span> = <span class="variable">$checkobj</span>[<span class="string">'keptIds'</span>];</span><br></pre></td></tr></table></figure>
<p>通过<a href="http://php.net/manual/en/function.json-decode.php" target="_blank" rel="external">json_decode</a>把从post变量里得到的jsonobj转换成php的关联数组(第二个参数true就是指定成关联数组返回)，这样就可以以键值对的方式获取jsonobj里的数据了。</p>
<p><strong>总之，为了在网络上传递复杂的数据类型，json用统一的格式来组织数据，并以字符的形式在网络上进行传输，就像是一种中间表达，沟通客户端与服务端的数据表达。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>写爬虫的时候真的发现json很好用，作为一种序列化机制。。。恐怕没有更好理解的了。</p>
<p>这里我的数据经历了：</p>
<p><strong>网站–&gt;python爬虫–&gt;mysql数据库&lt;–&gt;php程序&lt;–&gt;java(安卓app)</strong></p>]]>
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="general tech" scheme="http://yoursite.com/categories/general-tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[are you ok]]></title>
    <link href="http://yoursite.com/2015/12/13/are-you-ok/"/>
    <id>http://yoursite.com/2015/12/13/are-you-ok/</id>
    <published>2015-12-13T08:03:20.000Z</published>
    <updated>2015-12-13T08:27:21.993Z</updated>
    <content type="html"><![CDATA[<p>总算是要准备开始写博客了！</p>
<p>之前一直都是在用evernote当博客。。。</p>
<p>这边可以用markdown感觉以后可能会把这个博客当做笔记吧==</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总算是要准备开始写博客了！</p>
<p>之前一直都是在用evernote当博客。。。</p>
<p>这边可以用markdown感觉以后可能会把这个博客当做笔记吧==</p>
]]>
    </summary>
    
      <category term="helo, blog" scheme="http://yoursite.com/tags/helo-blog/"/>
    
  </entry>
  
</feed>
